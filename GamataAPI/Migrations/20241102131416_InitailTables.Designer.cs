// <auto-generated />
using System;
using GamataAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GamataAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241102131416_InitailTables")]
    partial class InitailTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("GamataAPI.Context.Activity", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Icon");

                    b.Property<string>("Name_English")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Name_English");

                    b.Property<string>("Name_Sinhala")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Name_Sinhala");

                    b.Property<string>("Name_Tamil")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Name_Tamil");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Type");

                    b.HasKey("Code");

                    b.ToTable("m_activity");
                });

            modelBuilder.Entity("GamataAPI.Context.Advisory", b =>
                {
                    b.Property<string>("FK_Product_Code")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Product_Code")
                        .HasColumnOrder(0);

                    b.Property<string>("FK_Activity_Code")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Activity_Code")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Description_English");

                    b.Property<string>("Description_Sinhala")
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Description_Sinhala");

                    b.Property<string>("Description_Tamil")
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Description_Tamil");

                    b.Property<int>("End_Duration")
                        .HasColumnType("int")
                        .HasColumnName("End_Duration");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("Order");

                    b.Property<int>("Start_Duration")
                        .HasColumnType("int")
                        .HasColumnName("Start_Duration");

                    b.Property<string>("Zone")
                        .HasColumnType("longtext")
                        .HasColumnName("Zone");

                    b.HasKey("FK_Product_Code", "FK_Activity_Code");

                    b.HasIndex("FK_Activity_Code");

                    b.HasIndex("FK_Product_Code");

                    b.HasIndex("Start_Duration");

                    b.ToTable("m_advisory");
                });

            modelBuilder.Entity("GamataAPI.Context.AppToken", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Mobile_OS")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Mobile_OS");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Token");

                    b.HasKey("Code");

                    b.HasIndex("FK_UserID");

                    b.ToTable("t_apptoken");
                });

            modelBuilder.Entity("GamataAPI.Context.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RnUserID");

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("mediumtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Designation")
                        .HasColumnType("longtext");

                    b.Property<string>("District")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Division")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("GramasewaDivision")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("IdentificationID")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("IdentificationType")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("ImageURl")
                        .HasColumnType("longtext");

                    b.Property<string>("Incorporation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IncorporationNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Join_date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NIC_no")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Province")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Remark")
                        .HasColumnType("mediumtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("StoreName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("t_user", (string)null);
                });

            modelBuilder.Entity("GamataAPI.Context.Blog", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Body_English")
                        .IsRequired()
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Body_English");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<string>("FK_User_ApprovedID")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lan")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Lan");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedOn")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Short_Text")
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Code");

                    b.HasIndex("FK_UserID");

                    b.ToTable("t_blog");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Diseases_Control_Method", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("Applied_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Applied_Method")
                        .HasColumnType("longtext");

                    b.Property<string>("Applied_Person_Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Applied_Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Batch_Code")
                        .HasColumnType("longtext");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<string>("Crop_Area")
                        .HasColumnType("longtext");

                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_CRB_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Registered_Pesticide")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Liquid_Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Pest_Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Purchase_Method")
                        .HasColumnType("longtext");

                    b.Property<string>("Recommended_Company_Name")
                        .HasColumnType("longtext");

                    b.HasKey("Code");

                    b.HasIndex("FK_CRB_Code");

                    b.ToTable("t_crb_diseases_control_method");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Employee_Training_Report", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_CRB_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Paid")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Time_Frame")
                        .HasColumnType("longtext");

                    b.Property<string>("Train_Company")
                        .HasColumnType("longtext");

                    b.Property<string>("Trainee_Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Training_Name")
                        .HasColumnType("longtext");

                    b.HasKey("Code");

                    b.HasIndex("FK_CRB_Code");

                    b.ToTable("t_crb_employee_training_report");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Harvest_Activity_Detail", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Batch_Code")
                        .HasColumnType("longtext");

                    b.Property<string>("Export_Quantity")
                        .HasColumnType("longtext");

                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_CRB_Code");

                    b.Property<decimal>("Harvest_After_Production_Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Harvest_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Harvest_Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Local_Market_Quantity")
                        .HasColumnType("longtext");

                    b.Property<string>("Other_Applies")
                        .HasColumnType("longtext");

                    b.Property<string>("Product_Name")
                        .HasColumnType("longtext");

                    b.HasKey("Code");

                    b.HasIndex("FK_CRB_Code");

                    b.ToTable("t_crb_harvest_activity_detail");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Irrigation_Detail", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_CRB_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Chemical_Research_Done")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Chemical_Risky")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Valid_Water_Sources")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Water_Flow_Through_Valid_Places")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Code");

                    b.HasIndex("FK_CRB_Code");

                    b.ToTable("t_crb_irrigation_detail");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Irrigation_Report", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("Applied_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Applied_Person_Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Batch_Code")
                        .HasColumnType("longtext");

                    b.Property<string>("Crop_Area")
                        .HasColumnType("longtext");

                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_CRB_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Irrigation_Method")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Water_Applied_Method")
                        .HasColumnType("longtext");

                    b.HasKey("Code");

                    b.HasIndex("FK_CRB_Code");

                    b.ToTable("t_crb_irrigation_report");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Location_Detail", b =>
                {
                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Cultivatability_Applied")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Cultivatability_Ok")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Plantation_History_Ok")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Previously_Cultivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Soil_Tested")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Land_Ownership")
                        .HasColumnType("longtext");

                    b.Property<string>("Land_Ownership_Other_Text")
                        .HasColumnType("longtext");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Previously_Cultivated_Product")
                        .HasColumnType("longtext");

                    b.Property<string>("Previously_Used_Chemical")
                        .HasColumnType("longtext");

                    b.HasKey("FK_CRB_Code");

                    b.ToTable("t_crb_location_detail");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Wast_Harvest_Record", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_CRB_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Product_Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Record_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Wast_Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Code");

                    b.HasIndex("FK_CRB_Code");

                    b.ToTable("t_crb_wast_harvest_record");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Additional_Fertilizer_Detail", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("Applied_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Applied_Method")
                        .HasColumnType("longtext");

                    b.Property<string>("Applied_Person_Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Applied_Product")
                        .HasColumnType("longtext");

                    b.Property<string>("Batch_No")
                        .HasColumnType("longtext");

                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_CRB_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Organic_Fertilizer")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Organic_Type")
                        .HasColumnType("longtext");

                    b.Property<string>("Recommended_Company")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Voulme")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Code");

                    b.HasIndex("FK_CRB_Code");

                    b.ToTable("t_crb_has_additional_fertilizer_detail");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Chemical_Detail", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("Applied_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Applied_Method")
                        .HasColumnType("longtext");

                    b.Property<string>("Applied_Person_Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Batch_No")
                        .HasColumnType("longtext");

                    b.Property<string>("Chemical_Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Control_Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_CRB_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Registed_Herbicide")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Recommended_Company")
                        .HasColumnType("longtext");

                    b.Property<string>("Veed_Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Code");

                    b.HasIndex("FK_CRB_Code");

                    b.ToTable("t_crb_has_chemical_detail");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Combined_Pest_Control_Detail", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_CRB_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Area_Specific_Seed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Disease_Free_Seeds")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Fence")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Infection_Resistors")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Ontime_Crop_Harvesting")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Recommended_Distance")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Recommended_Fertilizer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Recommended_Land_Prep")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Recommended_Plantation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Remove_Infected_Plants")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Successful_Veed_Removal")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Code");

                    b.HasIndex("FK_CRB_Code");

                    b.ToTable("t_crb_has_combined_pest_control_detail");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Fertilizer_Detail", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Batch_No")
                        .HasColumnType("longtext");

                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_CRB_Code");

                    b.Property<string>("Fertilizer_Type")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext");

                    b.Property<string>("Purcahsed_Location")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Purchased_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Code");

                    b.HasIndex("FK_CRB_Code");

                    b.ToTable("t_crb_has_fertilizer_detail");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Material_Purchase", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Batch_No")
                        .HasColumnType("longtext");

                    b.Property<string>("Expired_Date")
                        .HasColumnType("longtext");

                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_CRB_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Manufacture_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext");

                    b.Property<string>("Material_Type")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Purchase_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Purchased_Location")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Code");

                    b.HasIndex("FK_CRB_Code");

                    b.ToTable("t_crb_has_material_purchase");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Planting_Material", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_CRB_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Pataka_Ropanaya")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Planted_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Product_Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Ropana_Certification_and_Body")
                        .HasColumnType("longtext");

                    b.Property<string>("Ropana_Purchase_Supplier")
                        .HasColumnType("longtext");

                    b.Property<string>("Ropana_Treatment")
                        .HasColumnType("longtext");

                    b.HasKey("Code");

                    b.HasIndex("FK_CRB_Code");

                    b.ToTable("t_crb_has_planting_material");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Seed_Report", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("FK_CRB_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_CRB_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Seed_Hybrid")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Plantation_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Seed_Cert_Detail")
                        .HasColumnType("longtext");

                    b.Property<string>("Seed_Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Seed_Treatment_Detail")
                        .HasColumnType("longtext");

                    b.HasKey("Code");

                    b.HasIndex("FK_CRB_Code");

                    b.ToTable("t_crb_has_seed_report");
                });

            modelBuilder.Entity("GamataAPI.Context.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name_English")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name_English");

                    b.Property<string>("Name_Sinhala")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name_Sinhala");

                    b.Property<string>("Name_Tamil")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name_Tamil");

                    b.HasKey("Code");

                    b.ToTable("m_country");
                });

            modelBuilder.Entity("GamataAPI.Context.Country_Detail", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(0);

                    b.Property<string>("Type")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnOrder(1);

                    b.Property<string>("Parent")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("FK_Country_Code")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Country_Code");

                    b.Property<string>("Name_English")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name_English");

                    b.Property<string>("Name_Sinhala")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name_Sinhala");

                    b.Property<string>("Name_Tamil")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name_Tamil");

                    b.HasKey("Code", "Type", "Parent");

                    b.HasIndex("FK_Country_Code");

                    b.ToTable("m_country_detail");
                });

            modelBuilder.Entity("GamataAPI.Context.Crop_Record_Book", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("FK_Product_Code")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Product_Code");

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<decimal>("Farming_Location_Area")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Traget_Market")
                        .HasColumnType("longtext");

                    b.Property<int>("Trained_Staff_Count")
                        .HasColumnType("int");

                    b.Property<int>("Trainee_Staff_Count")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("FK_Product_Code");

                    b.HasIndex("FK_UserID");

                    b.ToTable("t_crop_record_book");
                });

            modelBuilder.Entity("GamataAPI.Context.Farming_Location", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Area_Unit")
                        .HasColumnType("longtext");

                    b.Property<string>("FK_Country_Code")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Country_Code");

                    b.Property<string>("FK_Country_Parent")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Country_Parent");

                    b.Property<string>("FK_Country_Type")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FK_Country_Type");

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Code");

                    b.HasIndex("FK_UserID");

                    b.HasIndex("FK_Country_Code", "FK_Country_Type", "FK_Country_Parent");

                    b.ToTable("t_farming_location");
                });

            modelBuilder.Entity("GamataAPI.Context.Farming_Product", b =>
                {
                    b.Property<string>("FK_UserID")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID")
                        .HasColumnOrder(0);

                    b.Property<string>("FK_Product_Code")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Product_Code")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("FK_UserID", "FK_Product_Code");

                    b.HasIndex("FK_Product_Code");

                    b.ToTable("t_farming_product");
                });

            modelBuilder.Entity("GamataAPI.Context.Harvest_Calendar", b =>
                {
                    b.Property<string>("FK_Product_Code")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Product_Code");

                    b.Property<bool>("April")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("August")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("December")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("February")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("January")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("July")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("June")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("March")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("May")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("November")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("October")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("September")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("FK_Product_Code");

                    b.ToTable("m_harvest_calendar");
                });

            modelBuilder.Entity("GamataAPI.Context.Inquiry", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("FK_Sell_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_Sell_Code");

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<string>("InquiryInDetail")
                        .HasColumnType("mediumtext");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Code");

                    b.HasIndex("FK_Sell_Code");

                    b.HasIndex("FK_UserID");

                    b.ToTable("t_inquiry");
                });

            modelBuilder.Entity("GamataAPI.Context.Inquiry_has_Message", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("FK_Inquiry")
                        .HasColumnType("int")
                        .HasColumnName("FK_Inquiry");

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsView")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .HasColumnType("mediumtext");

                    b.HasKey("Code");

                    b.HasIndex("FK_Inquiry");

                    b.HasIndex("FK_UserID");

                    b.ToTable("t_inquiry_has_message");
                });

            modelBuilder.Entity("GamataAPI.Context.Library_has_Group", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Name_English")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name_Sinhala")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name_Tamil")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Code");

                    b.ToTable("m_library_has_group");
                });

            modelBuilder.Entity("GamataAPI.Context.Library_has_Post", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Content");

                    b.Property<int>("FK_Library_Group")
                        .HasColumnType("int")
                        .HasColumnName("FK_Library_Group");

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<int>("FK_User_ApprovedID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lan")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Lan");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedOn")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Code");

                    b.HasIndex("FK_Library_Group");

                    b.HasIndex("FK_UserID");

                    b.ToTable("m_library_has_post");
                });

            modelBuilder.Entity("GamataAPI.Context.Listing", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Address")
                        .HasColumnType("mediumtext");

                    b.Property<string>("FK_Country_Code")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Country_Code");

                    b.Property<string>("FK_Country_Parent")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Country_Parent");

                    b.Property<string>("FK_Country_Type")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FK_Country_Type");

                    b.Property<string>("Group_of_Company")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Group_of_Company");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("InsertedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsOutlet")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsOutlet");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Name_English")
                        .IsRequired()
                        .HasColumnType("mediumtext");

                    b.Property<string>("Name_Sinhala")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Name_Tamil")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Product_Category")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Products_English")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Products_Sinhala")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Products_Tamil")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("Status");

                    b.Property<string>("Telephone")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Whatsup")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Code");

                    b.HasIndex("FK_Country_Code", "FK_Country_Type", "FK_Country_Parent");

                    b.ToTable("t_listing");
                });

            modelBuilder.Entity("GamataAPI.Context.Notification", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("FK_To_UserID")
                        .HasColumnType("int")
                        .HasColumnName("FK_To_UserID");

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsView")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Message_Sinhala")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Message_Tamil")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("TypeCode")
                        .HasColumnType("longtext");

                    b.HasKey("Code");

                    b.HasIndex("FK_UserID");

                    b.ToTable("t_notification");
                });

            modelBuilder.Entity("GamataAPI.Context.Order_Detail", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("FK_HeaderID")
                        .HasColumnType("int")
                        .HasColumnName("FK_HeaderID");

                    b.Property<int>("FK_Sell_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_Sell_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Quantity");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UOM");

                    b.Property<decimal>("Unit_Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Unit_Price");

                    b.HasKey("Code");

                    b.HasIndex("FK_HeaderID");

                    b.HasIndex("FK_Sell_Code");

                    b.ToTable("t_order_detail");
                });

            modelBuilder.Entity("GamataAPI.Context.Order_Header", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Buyer_Comment")
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Comment");

                    b.Property<int>("Buyer_Rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("Buyer_RateOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Cancel_Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("Cancel_Reason");

                    b.Property<string>("FK_Buyer_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_Buyer_UserID");

                    b.Property<string>("FK_Seller_UserID")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("FK_Seller_UserID");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Order_Canceled_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Order_Completed_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Order_Confirmed_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Order_Delivered_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Order_Placed_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Order_Received_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Order_Rejected_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Order_Shipped_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Shipping_Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Shipping_Address");

                    b.Property<string>("Shipping_Contact")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Shipping_Contact");

                    b.Property<string>("Shipping_Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Shipping_Name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Status");

                    b.HasKey("Code");

                    b.HasIndex("FK_Buyer_UserID");

                    b.ToTable("t_order_header");
                });

            modelBuilder.Entity("GamataAPI.Context.Plan", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Area");

                    b.Property<DateTime>("End_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FK_Country_Code")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Country_Code");

                    b.Property<string>("FK_Country_Parent")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Country_Parent");

                    b.Property<string>("FK_Country_Type")
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FK_Country_Type");

                    b.Property<string>("FK_Product_Code")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Product_Code");

                    b.Property<int?>("FK_Seed_Supplier_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_Seed_Supplier_Code");

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Inserted_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Last_Updated_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Seed_Code")
                        .HasColumnType("longtext")
                        .HasColumnName("Seed_Code");

                    b.Property<DateTime>("Start_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UOM");

                    b.HasKey("Code");

                    b.HasIndex("FK_Product_Code");

                    b.HasIndex("FK_Seed_Supplier_Code");

                    b.HasIndex("FK_UserID");

                    b.HasIndex("FK_Country_Code", "FK_Country_Type", "FK_Country_Parent");

                    b.ToTable("t_plan");
                });

            modelBuilder.Entity("GamataAPI.Context.Plan_Detail", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("End_Duration")
                        .HasColumnType("int");

                    b.Property<string>("FK_Activity")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Activity");

                    b.Property<int>("FK_PlanID")
                        .HasColumnType("int")
                        .HasColumnName("FK_PlanID");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Start_Duration")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("FK_Activity");

                    b.HasIndex("FK_PlanID");

                    b.ToTable("t_plan_detail");
                });

            modelBuilder.Entity("GamataAPI.Context.Post", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Cover_Image")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Cover_Image");

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<string>("Image1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Image1");

                    b.Property<string>("Image2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Image2");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Post_English")
                        .IsRequired()
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Post_English");

                    b.Property<string>("Post_Sinhala")
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Post_Sinhala");

                    b.Property<string>("Post_Tamil")
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Post_Tamil");

                    b.Property<DateTime>("Publish_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Code");

                    b.HasIndex("FK_UserID");

                    b.ToTable("t_post");
                });

            modelBuilder.Entity("GamataAPI.Context.Post_Comment", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("Commented_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FK_Post_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_Post_Code");

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Code");

                    b.HasIndex("FK_Post_Code");

                    b.HasIndex("FK_UserID");

                    b.ToTable("t_post_comment");
                });

            modelBuilder.Entity("GamataAPI.Context.Post_Like", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("FK_Post_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_Post_Code");

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Liked_DateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Code");

                    b.HasIndex("FK_Post_Code");

                    b.HasIndex("FK_UserID");

                    b.ToTable("t_post_like");
                });

            modelBuilder.Entity("GamataAPI.Context.Product", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Image");

                    b.Property<bool>("IsSeed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsSeed");

                    b.Property<bool>("Is_SLGAP_Certified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name_English")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name_English");

                    b.Property<string>("Name_Sinhala")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name_Sinhala");

                    b.Property<string>("Name_Tamil")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name_Tamil");

                    b.Property<string>("Parent")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Parent");

                    b.Property<string>("Product_Description")
                        .HasColumnType("mediumtext")
                        .HasColumnName("Product_Description");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("UOMGroups")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UOMGroups");

                    b.HasKey("Code");

                    b.ToTable("m_product");
                });

            modelBuilder.Entity("GamataAPI.Context.Product_Instruction", b =>
                {
                    b.Property<string>("FK_Product_Code")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Product_Code")
                        .HasColumnOrder(0);

                    b.Property<string>("FK_Activity_Code")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Activity_Code")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Description_English");

                    b.Property<string>("Description_Sinhala")
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Description_Sinhala");

                    b.Property<string>("Description_Tamil")
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Description_Tamil");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("FK_Product_Code", "FK_Activity_Code");

                    b.HasIndex("FK_Activity_Code");

                    b.ToTable("m_product_instructions");
                });

            modelBuilder.Entity("GamataAPI.Context.Sell", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<DateTime?>("Available_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Expired_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FK_Country_Code")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Country_Code");

                    b.Property<string>("FK_Country_Parent")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Country_Parent");

                    b.Property<string>("FK_Country_Type")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FK_Country_Type");

                    b.Property<string>("FK_Product_Code")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Product_Code");

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<string>("Image01")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Image02")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Image03")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Image04")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Inserted_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Last_Updated_DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Quantity");

                    b.Property<int>("Ref_PlantID")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("mediumtext");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UOM");

                    b.Property<decimal>("Unit_Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Unit_Price");

                    b.HasKey("Code");

                    b.HasIndex("FK_Product_Code");

                    b.HasIndex("FK_UserID");

                    b.HasIndex("FK_Country_Code", "FK_Country_Type", "FK_Country_Parent");

                    b.ToTable("t_sell");
                });

            modelBuilder.Entity("GamataAPI.Context.Sell_Rate", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Comment")
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Comment");

                    b.Property<int>("FK_Sell_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_Sell_Code");

                    b.Property<string>("FK_UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("FK_Sell_Code");

                    b.HasIndex("FK_UserID");

                    b.ToTable("t_sell_rate");
                });

            modelBuilder.Entity("GamataAPI.Context.Subscribe", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Code");

                    b.ToTable("t_subscribe");
                });

            modelBuilder.Entity("GamataAPI.Context.Supplier", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Address")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("Address");

                    b.Property<string>("Contact_No1")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Contact_No1");

                    b.Property<string>("Contact_No2")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Contact_No2");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Email");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name_English")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Name_English");

                    b.Property<string>("Name_Sinhala")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Name_Sinhala");

                    b.Property<string>("Name_Tamil")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Name_Tamil");

                    b.HasKey("Code");

                    b.ToTable("m_supplier");
                });

            modelBuilder.Entity("GamataAPI.Context.Supplier_Item", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("mediumtext")
                        .HasColumnName("Description");

                    b.Property<string>("FK_Product_Code")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FK_Product_Code");

                    b.Property<int>("FK_Supplier_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_Supplier_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name_English")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Name_English");

                    b.Property<string>("Name_Sinhala")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Name_Sinhala");

                    b.Property<string>("Name_Tamil")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Name_Tamil");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Type");

                    b.HasKey("Code");

                    b.HasIndex("FK_Product_Code");

                    b.HasIndex("FK_Supplier_Code");

                    b.ToTable("m_supplier_item");
                });

            modelBuilder.Entity("GamataAPI.Context.Temp_Shopping_Cart", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("FK_BuyerID")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_BuyerID");

                    b.Property<int>("FK_Sell_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_Sell_Code");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Quantity");

                    b.HasKey("Code");

                    b.HasIndex("FK_BuyerID");

                    b.HasIndex("FK_Sell_Code");

                    b.ToTable("t_temp_shopping_cart");
                });

            modelBuilder.Entity("GamataAPI.Context.WishList", b =>
                {
                    b.Property<int>("FK_Sell_Code")
                        .HasColumnType("int")
                        .HasColumnName("FK_Sell_Code")
                        .HasColumnOrder(0);

                    b.Property<string>("FK_UserID")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_UserID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("FK_Sell_Code", "FK_UserID");

                    b.HasIndex("FK_UserID");

                    b.ToTable("t_wishList");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Tbl_Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Tbl_Role_Claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tbl_User_Claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Tbl_User_Login", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Tbl_User_Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("Tbl_User_Token", (string)null);
                });

            modelBuilder.Entity("GamataAPI.Context.Advisory", b =>
                {
                    b.HasOne("GamataAPI.Context.Activity", "Activities")
                        .WithMany("Advisories")
                        .HasForeignKey("FK_Activity_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.Product", "Products")
                        .WithMany("Advisories")
                        .HasForeignKey("FK_Product_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activities");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("GamataAPI.Context.AppToken", b =>
                {
                    b.HasOne("GamataAPI.Context.AppUser", "User")
                        .WithMany("AppTokens")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamataAPI.Context.AppUser", b =>
                {
                    b.OwnsMany("GamataAPI.Model.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("AppUserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Token")
                                .HasColumnType("longtext");

                            b1.HasKey("AppUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("GamataAPI.Context.Blog", b =>
                {
                    b.HasOne("GamataAPI.Context.AppUser", "Users")
                        .WithMany()
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Diseases_Control_Method", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithMany("CRB_Diseases_Control_Methods")
                        .HasForeignKey("FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Employee_Training_Report", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithMany("CRB_Employee_Training_Reports")
                        .HasForeignKey("FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Harvest_Activity_Detail", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithMany("CRB_Harvest_Activity_Details")
                        .HasForeignKey("FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Irrigation_Detail", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithMany("CRB_Irrigation_Details")
                        .HasForeignKey("FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Irrigation_Report", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithMany("CRB_Irrigation_Reports")
                        .HasForeignKey("FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Location_Detail", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithOne("CRB_Location_Detail")
                        .HasForeignKey("GamataAPI.Context.CRB_Location_Detail", "FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_Wast_Harvest_Record", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithMany("CRB_Wast_Harvest_Records")
                        .HasForeignKey("FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Additional_Fertilizer_Detail", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithMany("CRB_has_Additional_Fertilizer_Details")
                        .HasForeignKey("FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Chemical_Detail", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithMany("CRB_has_Chemical_Details")
                        .HasForeignKey("FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Combined_Pest_Control_Detail", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithMany("CRB_has_Combined_Pest_Control_Details")
                        .HasForeignKey("FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Fertilizer_Detail", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithMany("CRB_has_Fertilizer_Details")
                        .HasForeignKey("FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Material_Purchase", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithMany("CRB_has_Material_Purchases")
                        .HasForeignKey("FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Planting_Material", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithMany("CRB_has_Planting_Materials")
                        .HasForeignKey("FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.CRB_has_Seed_Report", b =>
                {
                    b.HasOne("GamataAPI.Context.Crop_Record_Book", "Crop_Record_Book")
                        .WithMany("CRB_has_Seed_Reports")
                        .HasForeignKey("FK_CRB_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop_Record_Book");
                });

            modelBuilder.Entity("GamataAPI.Context.Country_Detail", b =>
                {
                    b.HasOne("GamataAPI.Context.Country", "Country")
                        .WithMany("Country_Details")
                        .HasForeignKey("FK_Country_Code");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("GamataAPI.Context.Crop_Record_Book", b =>
                {
                    b.HasOne("GamataAPI.Context.Product", "Product")
                        .WithMany("Crop_Record_Books")
                        .HasForeignKey("FK_Product_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.AppUser", "Users")
                        .WithMany("Crop_Record_Books")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GamataAPI.Context.Farming_Location", b =>
                {
                    b.HasOne("GamataAPI.Context.AppUser", "User")
                        .WithMany("Farming_Locations")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.Country_Detail", "Country_Detail")
                        .WithMany("Farming_Locations")
                        .HasForeignKey("FK_Country_Code", "FK_Country_Type", "FK_Country_Parent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country_Detail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamataAPI.Context.Farming_Product", b =>
                {
                    b.HasOne("GamataAPI.Context.Product", "Product")
                        .WithMany("Farming_Products")
                        .HasForeignKey("FK_Product_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.AppUser", "User")
                        .WithMany("Farming_Products")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamataAPI.Context.Harvest_Calendar", b =>
                {
                    b.HasOne("GamataAPI.Context.Product", "Product")
                        .WithMany("Harvest_Calendars")
                        .HasForeignKey("FK_Product_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GamataAPI.Context.Inquiry", b =>
                {
                    b.HasOne("GamataAPI.Context.Sell", "Sell")
                        .WithMany("Inquries")
                        .HasForeignKey("FK_Sell_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.AppUser", "Users")
                        .WithMany("Inquries")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sell");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GamataAPI.Context.Inquiry_has_Message", b =>
                {
                    b.HasOne("GamataAPI.Context.Inquiry", "Inquiry")
                        .WithMany("Inquiry_has_Messages")
                        .HasForeignKey("FK_Inquiry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.AppUser", "Users")
                        .WithMany("InquryMessages")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inquiry");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GamataAPI.Context.Library_has_Post", b =>
                {
                    b.HasOne("GamataAPI.Context.Library_has_Group", "Library_Group")
                        .WithMany("Posts")
                        .HasForeignKey("FK_Library_Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.AppUser", "Users")
                        .WithMany()
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library_Group");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GamataAPI.Context.Listing", b =>
                {
                    b.HasOne("GamataAPI.Context.Country_Detail", "Country_Detail")
                        .WithMany()
                        .HasForeignKey("FK_Country_Code", "FK_Country_Type", "FK_Country_Parent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country_Detail");
                });

            modelBuilder.Entity("GamataAPI.Context.Notification", b =>
                {
                    b.HasOne("GamataAPI.Context.AppUser", "Users")
                        .WithMany("Notifications")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GamataAPI.Context.Order_Detail", b =>
                {
                    b.HasOne("GamataAPI.Context.Order_Header", "Header")
                        .WithMany("Order_Details")
                        .HasForeignKey("FK_HeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.Sell", "Sell")
                        .WithMany("Order_Details")
                        .HasForeignKey("FK_Sell_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Header");

                    b.Navigation("Sell");
                });

            modelBuilder.Entity("GamataAPI.Context.Order_Header", b =>
                {
                    b.HasOne("GamataAPI.Context.AppUser", "Buyer")
                        .WithMany("Order_Header")
                        .HasForeignKey("FK_Buyer_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("GamataAPI.Context.Plan", b =>
                {
                    b.HasOne("GamataAPI.Context.Product", "Product")
                        .WithMany("Plans")
                        .HasForeignKey("FK_Product_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.Supplier", "Seed_Supplier")
                        .WithMany("Plans")
                        .HasForeignKey("FK_Seed_Supplier_Code");

                    b.HasOne("GamataAPI.Context.AppUser", "Users")
                        .WithMany("Plans")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.Country_Detail", "Country_Detail")
                        .WithMany("Plans")
                        .HasForeignKey("FK_Country_Code", "FK_Country_Type", "FK_Country_Parent");

                    b.Navigation("Country_Detail");

                    b.Navigation("Product");

                    b.Navigation("Seed_Supplier");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GamataAPI.Context.Plan_Detail", b =>
                {
                    b.HasOne("GamataAPI.Context.Activity", "Activities")
                        .WithMany("Plan_Details")
                        .HasForeignKey("FK_Activity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.Plan", "Plans")
                        .WithMany("Plan_Details")
                        .HasForeignKey("FK_PlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activities");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("GamataAPI.Context.Post", b =>
                {
                    b.HasOne("GamataAPI.Context.AppUser", "Users")
                        .WithMany()
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GamataAPI.Context.Post_Comment", b =>
                {
                    b.HasOne("GamataAPI.Context.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("FK_Post_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.AppUser", "Users")
                        .WithMany("Comments")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GamataAPI.Context.Post_Like", b =>
                {
                    b.HasOne("GamataAPI.Context.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("FK_Post_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.AppUser", "Users")
                        .WithMany("Likes")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GamataAPI.Context.Product_Instruction", b =>
                {
                    b.HasOne("GamataAPI.Context.Activity", "Activitiy")
                        .WithMany("Product_Instructions")
                        .HasForeignKey("FK_Activity_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.Product", "Product")
                        .WithMany("Product_Instructions")
                        .HasForeignKey("FK_Product_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activitiy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GamataAPI.Context.Sell", b =>
                {
                    b.HasOne("GamataAPI.Context.Product", "Product")
                        .WithMany()
                        .HasForeignKey("FK_Product_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.AppUser", "Users")
                        .WithMany("Sells")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.Country_Detail", "Country_Detail")
                        .WithMany("Sells")
                        .HasForeignKey("FK_Country_Code", "FK_Country_Type", "FK_Country_Parent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country_Detail");

                    b.Navigation("Product");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GamataAPI.Context.Sell_Rate", b =>
                {
                    b.HasOne("GamataAPI.Context.Sell", "Sell")
                        .WithMany("Ratings")
                        .HasForeignKey("FK_Sell_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.AppUser", "Users")
                        .WithMany("Ratings")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sell");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GamataAPI.Context.Supplier_Item", b =>
                {
                    b.HasOne("GamataAPI.Context.Product", "Product")
                        .WithMany("Supplier_Items")
                        .HasForeignKey("FK_Product_Code");

                    b.HasOne("GamataAPI.Context.Supplier", "Supplier")
                        .WithMany("Supplier_Items")
                        .HasForeignKey("FK_Supplier_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("GamataAPI.Context.Temp_Shopping_Cart", b =>
                {
                    b.HasOne("GamataAPI.Context.AppUser", "Buyer")
                        .WithMany("Temp_Shopping_Cart")
                        .HasForeignKey("FK_BuyerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.Sell", "Sell")
                        .WithMany("Temp_Shopping_Cart")
                        .HasForeignKey("FK_Sell_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Sell");
                });

            modelBuilder.Entity("GamataAPI.Context.WishList", b =>
                {
                    b.HasOne("GamataAPI.Context.Sell", "Sell")
                        .WithMany("WishLists")
                        .HasForeignKey("FK_Sell_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.AppUser", "Users")
                        .WithMany("WishLists")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sell");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GamataAPI.Context.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GamataAPI.Context.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamataAPI.Context.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GamataAPI.Context.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamataAPI.Context.Activity", b =>
                {
                    b.Navigation("Advisories");

                    b.Navigation("Plan_Details");

                    b.Navigation("Product_Instructions");
                });

            modelBuilder.Entity("GamataAPI.Context.AppUser", b =>
                {
                    b.Navigation("AppTokens");

                    b.Navigation("Comments");

                    b.Navigation("Crop_Record_Books");

                    b.Navigation("Farming_Locations");

                    b.Navigation("Farming_Products");

                    b.Navigation("Inquries");

                    b.Navigation("InquryMessages");

                    b.Navigation("Likes");

                    b.Navigation("Notifications");

                    b.Navigation("Order_Header");

                    b.Navigation("Plans");

                    b.Navigation("Ratings");

                    b.Navigation("Sells");

                    b.Navigation("Temp_Shopping_Cart");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("GamataAPI.Context.Country", b =>
                {
                    b.Navigation("Country_Details");
                });

            modelBuilder.Entity("GamataAPI.Context.Country_Detail", b =>
                {
                    b.Navigation("Farming_Locations");

                    b.Navigation("Plans");

                    b.Navigation("Sells");
                });

            modelBuilder.Entity("GamataAPI.Context.Crop_Record_Book", b =>
                {
                    b.Navigation("CRB_Diseases_Control_Methods");

                    b.Navigation("CRB_Employee_Training_Reports");

                    b.Navigation("CRB_Harvest_Activity_Details");

                    b.Navigation("CRB_Irrigation_Details");

                    b.Navigation("CRB_Irrigation_Reports");

                    b.Navigation("CRB_Location_Detail");

                    b.Navigation("CRB_Wast_Harvest_Records");

                    b.Navigation("CRB_has_Additional_Fertilizer_Details");

                    b.Navigation("CRB_has_Chemical_Details");

                    b.Navigation("CRB_has_Combined_Pest_Control_Details");

                    b.Navigation("CRB_has_Fertilizer_Details");

                    b.Navigation("CRB_has_Material_Purchases");

                    b.Navigation("CRB_has_Planting_Materials");

                    b.Navigation("CRB_has_Seed_Reports");
                });

            modelBuilder.Entity("GamataAPI.Context.Inquiry", b =>
                {
                    b.Navigation("Inquiry_has_Messages");
                });

            modelBuilder.Entity("GamataAPI.Context.Library_has_Group", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("GamataAPI.Context.Order_Header", b =>
                {
                    b.Navigation("Order_Details");
                });

            modelBuilder.Entity("GamataAPI.Context.Plan", b =>
                {
                    b.Navigation("Plan_Details");
                });

            modelBuilder.Entity("GamataAPI.Context.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("GamataAPI.Context.Product", b =>
                {
                    b.Navigation("Advisories");

                    b.Navigation("Crop_Record_Books");

                    b.Navigation("Farming_Products");

                    b.Navigation("Harvest_Calendars");

                    b.Navigation("Plans");

                    b.Navigation("Product_Instructions");

                    b.Navigation("Supplier_Items");
                });

            modelBuilder.Entity("GamataAPI.Context.Sell", b =>
                {
                    b.Navigation("Inquries");

                    b.Navigation("Order_Details");

                    b.Navigation("Ratings");

                    b.Navigation("Temp_Shopping_Cart");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("GamataAPI.Context.Supplier", b =>
                {
                    b.Navigation("Plans");

                    b.Navigation("Supplier_Items");
                });
#pragma warning restore 612, 618
        }
    }
}
